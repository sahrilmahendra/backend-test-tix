openapi: "3.0.1"
info:
  title: "Backend Test Tix.id"
  version: "1.0"
  description: "API Documentation for Backend Test Tix.id"
  contact:
    name: Sahril Mahendra
    email: sahrilmahendra@gmail.com
tags:
  - name: Authentication
    description: Endpoint for verifying who a user is
  - name: Sign Up
    description: Endpoint for user registration
  - name: Users
    description: Endpoint for perform operations on user
paths:
  ####################################
  #  AUTHENTICATION
  ####################################
  /login:
    post:
      tags:
        - Authentication
      summary: Get token for access to account
      requestBody:
        $ref: "#/components/requestBodies/requestBodyLogin"
      responses:
        "200":
          $ref: "#/components/responses/loginSuccess"
        "400":
          $ref: "#/components/responses/loginFailed"
  ####################################
  #  USERS
  ####################################
  /users:
    post:
      tags:
        - Sign Up
      summary: Create user
      requestBody:
        $ref: "#/components/requestBodies/requestBodyUser"
      responses:
        "200":
          $ref: "#/components/responses/successOperationNonData"
        "400":
          $ref: "#/components/responses/createUserFailed"
    get:
      tags:
        - Users
      summary: Get all users
      responses:
        "200":
          $ref: "#/components/responses/getAllUsersSuccess"
        "404":
          $ref: "#/components/responses/dataNotFound"
        "500":
          $ref: "#/components/responses/internalServerError"
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by id
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        "200":
          $ref: "#/components/responses/getUserSuccess"
        "404":
          $ref: "#/components/responses/dataNotFound"
        "500":
          $ref: "#/components/responses/internalServerError"
    put:
      tags:
        - Users
      summary: Update user by id
      security:
        - JWTAuth: []
      parameters:
        - $ref: "#/components/parameters/idParam"
      requestBody:
        $ref: "#/components/requestBodies/requestBodyUserUpdate"
      responses:
        "200":
          $ref: "#/components/responses/successOperationNonData"
        "400":
          $ref: "#/components/responses/updateUserFailed"
        "401":
          $ref: "#/components/responses/unAuthorized"
        "404":
          $ref: "#/components/responses/dataNotFound"
    delete:
      tags:
        - Users
      summary: Delete user by id
      security:
        - JWTAuth: []
      parameters:
        - $ref: "#/components/parameters/idParam"
      responses:
        "200":
          $ref: "#/components/responses/successOperationNonData"
        "400":
          $ref: "#/components/responses/deleteDataByIdFailed"
        "401":
          $ref: "#/components/responses/unAuthorized"
        "500":
          $ref: "#/components/responses/deleteInternalError"
####################################
#  COMPONENTS
####################################
components:
  schemas:
    requestDataLogin:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    requestDataUser:
      type: object
      required:
        - username
        - email
        - address
        - password
      properties:
        name:
          type: string
          minLength: 1
          pattern: "^0-9A-Za-z_.$"
        email:
          type: string
          format: email
          minLength: 5
          description: inputted email must be unique
        address:
          type: string
          minLength: 1
        password:
          type: string
          minLength: 6
    responseLoginWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            Token:
              type: string
        Message:
          type: string
    responseUserWithData:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: object
          properties:
            ID:
              type: integer
            Name:
              type: string
            Email:
              type: string
            Address:
              type: string
        Message:
          type: string
    responseUserWithDataArray:
      type: object
      properties:
        Code:
          type: integer
        Data:
          type: array
          items:
            type: object
            properties:
              ID:
                type: integer
              Name:
                type: string
              Email:
                type: string
              Address:
                type: string
        Message:
          type: string
    responseNonData:
      type: object
      properties:
        Code:
          type: integer
        Message:
          type: string
  parameters:
    idParam:
      name: id
      in: path
      required: true
      schema:
        type: integer
        example: 1
    idUser:
      name: id_user
      in: path
      required: true
      schema:
        type: integer
        example: 1
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"
  requestBodies:
    requestBodyLogin:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/requestDataLogin"
          examples:
            User:
              value:
                username: sahril
                password: sahril123
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestDataLogin"
    requestBodyUser:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/requestDataUser"
          examples:
            newUser:
              value:
                name: sahril
                email: sahril@example.com
                address: sidoarjo
                password: sahril123
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestDataUser"
    requestBodyUserUpdate:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/requestDataUser"
          examples:
            newData:
              value:
                name: updateusername
                email: sahril@update.com
                address: surabaya
                password: newpass
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/requestDataUser"
  responses:
    loginSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseLoginWithData"
          examples:
            User:
              value:
                Code: 200
                Data:
                  {
                    Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2Mzk2OTAwMjMsInJvbGUiOiJhZG1pbiIsInVzZXJJZCI6NH0.1Ij1ZVqpqPDOVXzaXyqcyNMlnbLTfwD28Byv0aWNjAQ,
                  }
                Message: login success
    loginFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            Login Failed:
              $ref: "#/components/examples/loginFailed"
            Invalid Data Request:
              $ref: "#/components/examples/invalidDataRequest"
            Data Can't be Empty:
              $ref: "#/components/examples/dataCantEmpty"
    successOperationNonData:
      description: Success Response Non Data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          example:
            Code: 200
            Message: success operation
    createUserFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            Data Can't be Empty:
              $ref: "#/components/examples/dataCantEmpty"
            Invalid Data Request:
              $ref: "#/components/examples/invalidDataRequest"
            Username or Email Already Exist:
              $ref: "#/components/examples/usernameOrEmailAlreadyExist"
    getAllUsersSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseUserWithDataArray"
          example:
            Code: 200
            Data:
              [
                {
                  ID: 1,
                  Name: try,
                  Email: try@example.com,
                  Address: "Sidoarjo",
                },
                {
                  ID: 2,
                  Name: test123,
                  Email: test123@example.com,
                  Address: "Bandung",
                },
                {
                  ID: 3,
                  Name: coba123,
                  Email: coba123@example.com,
                  Address: "Jakarta",
                },
              ]
            Message: Success Operation
    dataNotFound:
      description: Data Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            Data Not Found:
              $ref: "#/components/examples/dataNotFound"
    internalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            Internal Server Error:
              $ref: "#/components/examples/internalServerError"
    getUserSuccess:
      description: Success Response Data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseUserWithData"
          example:
            Code: 200
            Data:
              { ID: 1, Name: try, Email: try@example.com, Address: sidoarjo }
            Message: success operation
    getDataByIdFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            Invalid Id:
              $ref: "#/components/examples/invalidId"
            Data Not Found:
              $ref: "#/components/examples/dataNotFound"
            Bad Request:
              $ref: "#/components/examples/badRequest"
    deleteInternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            Internal Server Error:
              $ref: "#/components/examples/deleteInternalError"
    unAuthorized:
      description: Access Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            Access Forbidden:
              $ref: "#/components/examples/accessForbidden"
    updateUserFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            Data Can't be Empty:
              $ref: "#/components/examples/dataCantEmpty"
            Invalid ID:
              $ref: "#/components/examples/invalidId"
            Invalid Data Request:
              $ref: "#/components/examples/invalidDataRequest"
            Username or Email Already Exist:
              $ref: "#/components/examples/usernameOrEmailAlreadyExist"
    deleteDataByIdFailed:
      description: Bad Request Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseNonData"
          examples:
            Invalid Id:
              $ref: "#/components/examples/invalidId"
            Data Not Found:
              $ref: "#/components/examples/dataNotFound"
  examples:
    loginFailed:
      value:
        Code: 400
        Message: login failed
    invalidDataRequest:
      value:
        Code: 400
        Message: invalid data request
    dataCantEmpty:
      value:
        Code: 400
        Message: data can't be empty
    accessIsDenied:
      value:
        Code: 400
        Message: Access is denied ID data is in the orderInvalid Id
    deleteInternalError:
      value:
        Code: 500
        Message: failed to delete user
    accessForbidden:
      value:
        Code: 401
        Message: access forbidden
    badRequest:
      value:
        Code: 400
        Message: Bad Request
    cantConnecttoServer:
      value:
        Code: 500
        Message: Can't Connect to server
    dataisAvailable:
      value:
        Code: 400
        Message: Data is Available
    dataNotFound:
      value:
        Code: 404
        Message: user not found
    internalServerError:
      value:
        Code: 500
        Message: failed to get user
    detailsCantBeEmpty:
      value:
        Code: 400
        Message: Details Can't Be Empty
    usernameOrEmailAlreadyExist:
      value:
        Code: 400
        Message: username or email already exist
    failedtoUploadFile:
      value:
        Code: 500
        Message: Failed to Upload File
    fileExtensionNotAllowed:
      value:
        Code: 400
        Message: File Extension Not Allowed
    groupProductFull:
      value:
        Code: 400
        Message: Group Product Full
    idGroupProductNotFound:
      value:
        Code: 400
        Message: Id Group Product Not Found
    idProductNotFound:
      value:
        Code: 400
        Message: Id Product Not Found
    illegalFile:
      value:
        Code: 400
        Message: Illegal File
    invalidEmail:
      value:
        Code: 400
        Message: Invalid Email
    invalidId:
      value:
        Code: 400
        Message: invalid id
    invalidName:
      value:
        Code: 400
        Message: Invalid Name
    invalidParam:
      value:
        Code: 400
        Message: Invalid Param
    invalidPassword:
      value:
        Code: 400
        Message: Invalid Password
    invalidTelephoneNumber:
      value:
        Code: 400
        Message: Invalid Telephone Number
    nameAlphanumeric:
      value:
        Code: 400
        Message: Name can only contains alphanumeric
    notAvailable:
      value:
        Code: 400
        Message: Not Available
    passwordMustConsistOf:
      value:
        Code: 400
        Message: Password must consist of 6 characters or more
    sizeFileTooBig:
      value:
        Code: 400
        Message: Size File Too Big
